#!/bin/sh
#
# Adds `git clean-branches` alias to cleanup branches
#  * Prunes branches removed from the origins
#  * Deletes branches that are merged into the current branch
#
# Usage:
#  git checkout master
#  git pull
#  git clean-branches
declare -a mainline=('develop' 'main' 'master')
if git rev-parse --is-inside-work-tree &> /dev/null; then
    for origin in $( git remote ); do
        git remote prune "$origin"
    done

    current=$(git branch | grep '^*' | colrm 1 2);

    for br in $(git br --merged | colrm 1 2); do
        if [ "$current" = "$br" ]; then
            continue
        elif [[ " ${mainline[@]} " =~ " $br " ]]; then
            # Don't delete mainline branches
            continue
        fi
        git br -d "$br"
    done

    # Squash Merged:
    for mainline in "${mainline[@]}"; do
        if git rev-parse --verify "$mainline" &> /dev/null; then
            git checkout -q "$mainline"
            output=$(git for-each-ref refs/heads/ "--format=%(refname:short)")
            while read branch; do
                if [[ " ${mainline[@]} " =~ " $branch " ]]; then
                    # skip mainline branches
                    continue
                fi
                mergeBase=$(git merge-base $mainline $branch)
                if [[ $(git cherry $mainline $(git commit-tree $(git rev-parse "$branch^{tree}") -p $mergeBase -m _)) == "-"* ]]; then
                    git branch -D $branch
                fi
            done <<< "$output"
            break
        fi
    done
fi
